openapi: 3.0.3
info:
  title: pagoPA Wallet API
  version: 0.0.1
  description: >-
    API to handle wallets PagoPA, where a wallet is triple between user
    identifier, payment instrument and applications (i.e pagoPA, bpd).
  termsOfService: https://pagopa.it/terms/
tags:
  - name: wallets
    description: Api's for handle a wallet
    externalDocs:
      url: >-
        https://pagopa.atlassian.net/wiki/spaces/WA/overview?homepageId=622658099
      description: Documentation
  - name: migration
    description: Api's dedicate to migration phase
servers:
  - url: https://${hostname}
paths:
  /wallets:
    post:
      tags:
        - wallets
      summary: Create a new wallet
      description: Creates a new wallet
      operationId: createWallet
      parameters:
        - in: header
          name: x-user-id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: x-client-id
          required: true
          description: Channel from which this wallet will be onboarded
          schema:
            $ref: '#/components/schemas/ClientId'
      requestBody:
        description: Create a new wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletCreateRequest'
        required: true
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletCreateResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '502':
          description: Gateway error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
    get:
      tags:
        - wallets
      summary: Get wallet by user identifier
      description: Returns a list of wallets related to user
      operationId: getWalletsByIdUser
      parameters:
        - in: header
          name: x-user-id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallets'
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
        '504':
          description: Timeout serving request
  /transactions/{transactionId}/wallets:
    post:
      tags:
        - transaction-wallets
      summary: Create a new wallet for transactionId with contextual onboarding
      description: Creates a new wallet for transactionId with contestul onboarding
      operationId: createWalletForTransaction
      parameters:
        - in: header
          name: x-user-id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: x-client-id
          required: true
          description: Channel from which this wallet will be onboarded
          schema:
            $ref: '#/components/schemas/ClientId'
        - name: transactionId
          in: path
          description: ecommerce transaction id
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransactionCreateRequest'
        required: true
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionCreateResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '502':
          description: Gateway error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
  /wallets/{walletId}:
    get:
      tags:
        - wallets
      summary: Get wallet by id
      description: Returns a single wallet
      operationId: getWalletById
      parameters:
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
      responses:
        '200':
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
        '504':
          description: Timeout serving request
    delete:
      tags:
        - wallets
      summary: Delete wallet by id
      description: Returns a single wallet
      operationId: deleteWalletById
      parameters:
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
      responses:
        '204':
          description: Wallet deleted successfully
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
        '504':
          description: Timeout serving request
  /wallets/{walletId}/applications:
    put:
      tags:
        - wallets
      summary: Update wallet applications and their status
      description: Update wallet applications
      operationId: updateWalletApplicationsById
      requestBody:
        description: Update wallet applications for the specified wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletApplicationUpdateRequest'
      parameters:
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
      responses:
        '204':
          description: Wallet updated successfully
        '409':
          description: |
            Wallet request is inconsistent with global application status
            (e.g. the user requested a application to be enabled but the application has a global status of disabled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletApplicationsPartialUpdate"
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found or one of the requested applications was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
  /wallets/{walletId}/sessions:
    post:
      tags:
        - wallets
      summary: Create a new session wallet
      description: This endpoint returns an object containing data on how a frontend can build a html form to allow direct exchanging of payment information to the payment gateway without `wallet` having to store PCI data (or other sensitive data tied to the payment method).The returned data is tied to a session on the payment gateway identified by the field `orderId`.
      operationId: createSessionWallet
      parameters:
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
      requestBody:
        description: Session input data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionInputData'
      responses:
        '200':
          description: Session Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionWalletCreateResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '502':
          description: Gateway error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
  /wallets/{walletId}/sessions/{orderId}:
    get:
      tags:
        - wallets
      summary: Get a session wallet
      description: This endpoint returns an object containing data related to wallet session identified by orderId and walletId.
      operationId: getSessionWallet
      parameters:
        - name: x-user-id
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
        - name: orderId
          in: path
          description: ID of npg order
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'

      responses:
        '200':
          description: Session Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionWalletRetrieveResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '502':
          description: Gateway error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
  /wallets/{walletId}/sessions/{orderId}/validations:
    post:
      tags:
        - wallets
      summary: Create new validation request given a initialized wallet
      description: This endpoint returns an object with a url to which to redirect in case of APM or a url on which to build an iframe for GDI check.
      operationId: postWalletValidations
      security:
        - bearerAuth: [ ]
      parameters:
        - name: walletId
          in: path
          description: ID of wallet
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
        - name: orderId
          in: path
          description: ID of order session
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'
      responses:
        '200':
          description: Verify requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletVerifyRequestsResponse'
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal Server Error
        '504':
          description: Timeout serving request
  /wallets/{walletId}/sessions/{orderId}/notifications:
    post:
      tags:
        - wallets
      summary: Update Wallet on NPG onboarding authorization response
      description: Update Wallet on NPG onboarding authorization response
      operationId: notifyWallet
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: walletId
          schema:
            type: string
            format: uuid
          required: true
          description: Unique identifier of the wallet
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Unique identifier of the npg session
      requestBody:
        description: Notify wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletNotificationRequest'
        required: true
      responses:
        '200':
          description: Notification handled successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                type: https://example.com/problem/
                title: string
                status: 400
                detail: Invalid input
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                type: https://example.com/problem/
                title: string
                status: 401
                detail: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                type: https://example.com/problem/
                title: string
                status: 500
                detail: Internal server error
  /applications:
    post:
      tags:
        - applications
      summary: Create a new application
      description: Creates a new application
      operationId: createApplication
      requestBody:
        description: Create a new application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreateRequest'
        required: true
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreateResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '502':
          description: Gateway error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
  /applications/{applicationId}:
    patch:
      tags:
        - applications
      summary: Set application status
      description: Set application status
      operationId: setApplicationStatus
      requestBody:
        description: Set application status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationPatchRequest'
      parameters:
        - name: applicationId
          in: path
          description: ID of application to return
          required: true
          schema:
            $ref: '#/components/schemas/ApplicationId'
      responses:
        '204':
          description: Application updated successfully
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Application not found
        '504':
          description: Timeout serving request
  /wallets/{walletId}/auth-data:
    get:
      tags:
        - wallets
      summary: Get wallet auth data by id
      description: Returns auth data for a single wallet
      operationId: getWalletAuthDataById
      parameters:
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
      responses:
        '200':
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletAuthData'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '504':
          description: Timeout serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
  /wallets/{walletId}/usage:
    patch:
      tags:
        - wallets
      summary: Update last usage for wallet
      operationId: updateWalletUsage
      parameters:
        - name: walletId
          in: path
          description: ID of wallet to return
          required: true
          schema:
            $ref: '#/components/schemas/WalletId'
      requestBody:
        description: Session input data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  $ref: '#/components/schemas/ClientId'
                usageTime:
                  type: string
                  format: date-time
      responses:
        '204':
          description: Wallet update successfully
        '400':
          description: Invalid input id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Wallet not found
        '504':
          description: Timeout serving request

  /migrations/wallets:
    put:
      tags:
        - migration
      summary: Initializes a new wallet or returns details for pm of an existing one
      description: |
        Create the association between the new pair (walletId, contractId) and the old PM's walletId.
        The API has an idempotent behaviour.
      operationId: createWalletByPM
      requestBody:
        description: Initialize a new wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletPmAssociationRequest'
        required: true
      responses:
        '200':
          description: Wallet initialized successfully and details about new association.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletPmAssociationResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              description: "The number of milliseconds after which request can be retried"
              schema:
                type: number
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'

  /migrations/wallets/updateDetails:
    post:
      tags:
        - migration
      summary: Update wallet details by Payment Manager.
      description: |
        Update Wallet with its details by Payment Manager during the migration process. Also the Wallet goes to VALIDATED status.
      operationId: updateWalletDetailsByPM
      requestBody:
        description: "Wallet details by Payment Manager"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletPmCardDetailsRequest'
        required: true

      responses:
        '200':
          description: 'ID of updated Wallet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletPmCardDetailsResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: 'Wallet not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              description: "The number of milliseconds after which request can be retried"
              schema:
                type: number
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'

  /migrations/wallets/delete:
    post:
      tags:
        - migration
      summary: Remove existing Wallet from given ContractId
      description: |
        Remove an existing Wallet associated from given ContractId. The status of Wallet
        will be move to DELETED.
      operationId: removeWalletByPM
      requestBody:
        description: "Contract Id associated to Wallet"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletPmDeleteRequest'
        required: true

      responses:
        '204':
          description: "Wallet deleted successfully"
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: 'ContractId or Wallet not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          headers:
            Retry-After:
              description: "The number of milliseconds after which request can be retried"
              schema:
                type: number
        '500':
          description: Internal server error serving request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'

components:
  schemas:
    AmountEuroCents:
      description: Amount for payments, in euro cents
      type: integer
      minimum: 0
      maximum: 99999999
    WalletId:
      description: Wallet identifier
      type: string
      format: uuid
    OrderId:
      description: Order session payment gateway identifier
      type: string
    ClientId:
      description: Clients that can initiate a wallet session
      type: string
      enum:
        - CHECKOUT
        - IO
    WalletVerifyRequestsResponse:
      type: object
      description: Data to perform a wallet verify with payment gateway
      properties:
        orderId:
          $ref: '#/components/schemas/OrderId'
        details:
          description: Redirection URL or iframe url according payment method type
          type: object
          oneOf:
            - $ref: '#/components/schemas/WalletVerifyRequestCardDetails'
            - $ref: '#/components/schemas/WalletVerifyRequestAPMDetails'
          discriminator:
            propertyName: type
            mapping:
              CARDS: '#/components/schemas/WalletVerifyRequestCardDetails'
              APM: '#/components/schemas/WalletVerifyRequestAPMDetails'
      required:
        - details
        - orderId
    WalletVerifyRequestCardDetails:
      type: object
      description: Card verify request details
      properties:
        type:
          type: string
          description: Wallet  verify request details discriminator field.
        iframeUrl:
          type: string
          description: iframeUrl in order to run gdi check.
    WalletVerifyRequestAPMDetails:
      type: object
      description: Alternative Payment Method (APM) verify request details
      properties:
        type:
          type: string
          description: Wallet  verify request details discriminator field.
        redirectUrl:
          type: string
          description: redirect url in order to continue verify.
    WalletApplicationsPartialUpdate:
      type: object
      description: Response for wallet applications partial update due to status conflicts
      properties:
        updatedApplications:
          type: array
          items:
            $ref: "#/components/schemas/WalletApplication"
        failedApplications:
          type: array
          items:
            $ref: "#/components/schemas/WalletApplication"
      example:
        updatedApplications:
          - name: "PAGOPA"
            status: "ENABLED"
        failedApplications:
          - name: "PARI"
            status: "DISABLED"
    Application:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        updateDate:
          description: Application last update date
          type: string
          format: date-time
    ApplicationId:
      description: Application identifier
      type: string
    WalletApplication:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/WalletApplicationId'
        status:
          $ref: '#/components/schemas/WalletApplicationStatus'
    WalletApplicationId:
      type: string
      description: id of the application associated to the wallet
    WalletApplicationStatus:
      type: string
      description: Enumeration of wallet statuses
      enum:
        - ENABLED
        - DISABLED
    ApplicationStatus:
      type: string
      description: Enumeration of wallet statuses
      enum:
        - ENABLED
        - DISABLED
        - INCOMING
    WalletStatus:
      type: string
      description: Enumeration of wallet statuses
      enum:
        - CREATED
        - INITIALIZED
        - VALIDATION_REQUESTED
        - VALIDATED
        - DELETED
        - ERROR
    WalletCardDetails:
      type: object
      description: Card payment instrument details
      properties:
        type:
          type: string
          description: Wallet details discriminator field.
        lastFourDigits:
          description: >-
            Card last four digits
          type: string
          minLength: 4
          maxLength: 4
          example: 9876
        expiryDate:
          type: string
          description: Credit card expiry date. The date format is `YYYYMM`
          pattern: ^\d{6}$
          example: '203012'
        brand:
          description: Payment instrument brand
          type: string
      required:
        - type
        - bin
        - lastFourDigits
        - expiryDate
        - brand
    WalletPaypalDetails:
      type: object
      description: Paypal instrument details
      properties:
        type:
          type: string
          description: Wallet details discriminator field.
        pspId:
          type: string
          description: PSP identifier for the PayPal wallet
        maskedEmail:
          description: masked email
          type: string
          example: test***@***test.it
      required:
        - type
        - pspId
    WalletApplicationUpdateRequest:
      type: object
      description: Wallet update request
      properties:
        applications:
          type: array
          description: List of applications to update
          items:
            $ref: '#/components/schemas/WalletApplication'
    WalletCreateRequest:
      type: object
      description: Wallet creation request
      properties:
        applications:
          type: array
          description: List of applications for which wallet is enabled
          items:
            $ref: '#/components/schemas/ApplicationId'
        useDiagnosticTracing:
          type: boolean
        paymentMethodId:
          type: string
          format: uuid
      required:
        - applications
        - useDiagnosticTracing
        - paymentMethodId
    WalletCreateResponse:
      type: object
      description: Wallet creation response
      properties:
        walletId:
          $ref: '#/components/schemas/WalletId'
        redirectUrl:
          type: string
          format: url
          description: >-
            Redirection URL to a payment gateway page where the user can input a
            payment instrument information with walletId and useDiagnosticTracing as query param
          example: http://localhost/inputPage?walletId=123&useDiagnosticTracing=true
      required:
        - walletId
        - redirectUrl
    WalletTransactionCreateRequest:
      type: object
      description: Wallet for transaction with contextual onboarding creation request
      properties:
        useDiagnosticTracing:
          type: boolean
        paymentMethodId:
          type: string
          format: uuid
        amount:
          $ref: '#/components/schemas/AmountEuroCents'
      required:
        - useDiagnosticTracing
        - paymentMethodId
        - amount
    WalletTransactionCreateResponse:
      type: object
      description: Wallet for transaction with contextual onboarding creation response
      properties:
        walletId:
          $ref: '#/components/schemas/WalletId'
        redirectUrl:
          type: string
          format: url
          description: >-
            Redirection URL to a payment gateway page where the user can input a
            payment instrument information with walletId and useDiagnosticTracing as query param
          example: http://localhost/inputPage?walletId=123&useDiagnosticTracing=true
      required:
        - walletId
    WalletInfo:
      type: object
      description: Wallet information
      properties:
        walletId:
          $ref: '#/components/schemas/WalletId'
        userId:
          type: string
          description: user identifier
        paymentInstrumentId:
          description: Payment instrument identifier
          type: string
        paymentMethodId:
          description: Payment method identifier
          type: string
        status:
          $ref: '#/components/schemas/WalletStatus'
        creationDate:
          description: Wallet creation date
          type: string
          format: date-time
        updateDate:
          description: Wallet update date
          type: string
          format: date-time
        applications:
          description: list of applications for which this wallet is created for
          type: array
          items:
            $ref: '#/components/schemas/WalletApplication'
        details:
          description: >-
            details for the specific payment instrument. This field is
            discriminated by the type field
          type: object
          oneOf:
            - $ref: '#/components/schemas/WalletCardDetails'
            - $ref: '#/components/schemas/WalletPaypalDetails'
          discriminator:
            propertyName: type
            mapping:
              CARDS: '#/components/schemas/WalletCardDetails'
              PAYPAL: '#/components/schemas/WalletPaypalDetails'
        paymentMethodAsset:
          description: wallet asset
          type: string
          format: uri
      required:
        - walletId
        - paymentMethodId
        - userId
        - status
        - creationDate
        - updateDate
        - type
        - applications
        - paymentMethodAsset
    Wallets:
      type: object
      description: Wallets information
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletInfo'
    SessionInputData:
      type: object
      description: Data needed to create  session
      oneOf:
        - $ref: "#/components/schemas/SessionInputCardData"
        - $ref: "#/components/schemas/SessionInputPayPalData"
      discriminator:
        propertyName: paymentMethodType
        mapping:
          cards: "#/components/schemas/SessionInputCardData"
          paypal: "#/components/schemas/SessionInputPayPalData"
    SessionInputCardData:
      x-discriminator-value: cards
      type: object
      description: Data required to initialize a card onboarding session
      properties:
        paymentMethodType:
          type: string
      required:
        - paymentMethodType
    SessionInputPayPalData:
      x-discriminator-value: paypal
      type: object
      description: Data required to initialize a PayPal onboarding session
      properties:
        paymentMethodType:
          type: string
        pspId:
          type: string
      required:
        - paymentMethodType
        - pspId
    SessionWalletCreateResponse:
      type: object
      description: Form data needed to create a credit card input form
      properties:
        orderId:
          type: string
        sessionData:
          oneOf:
            - $ref: "#/components/schemas/SessionWalletCreateResponseCardData"
            - $ref: "#/components/schemas/SessionWalletCreateResponseAPMData"
          discriminator:
            propertyName: paymentMethodType
            mapping:
              cards: "#/components/schemas/SessionWalletCreateResponseCardData"
              apm: "#/components/schemas/SessionWalletCreateResponseAPMData"
      required:
        - orderId
        - sessionData
    SessionWalletCreateResponseCardData:
      x-discriminator-value: cards
      type: object
      description: Session data returned by `createSessionWallet` operation in case of a credit card session
      properties:
        paymentMethodType:
          type: string
        cardFormFields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
      required:
        - paymentMethodType
        - cardFormFields
    SessionWalletCreateResponseAPMData:
      x-discriminator-value: apm
      type: object
      description: Session data returned by `createSessionWallet` operation in case of a credit card session
      properties:
        paymentMethodType:
          type: string
        redirectUrl:
          type: string
          format: url
      required:
        - paymentMethodType
        - redirectUrl
    WalletNotificationRequest:
      type: object
      description: Request body for execute wallet notification request
      properties:
        timestampOperation:
          type: string
          format: date-time
          description: Onboarding timestamp
        operationId:
          description: Operation ID
          type: string
        operationResult:
          type: string
          description: outcome received by NPG - https://developer.nexi.it/it/api/notifica
          enum:
            - AUTHORIZED
            - EXECUTED
            - DECLINED
            - DENIED_BY_RISK
            - THREEDS_VALIDATED
            - THREEDS_FAILED
            - PENDING
            - CANCELED
            - VOIDED
            - REFUNDED
            - FAILED
        errorCode:
          type: string
          description: Error code for the onboarding operation received by NPG
        details:
          description: Wallet notified payment method details
          type: object
          oneOf:
            - $ref: '#/components/schemas/WalletNotificationRequestPaypalDetails'
            - $ref: '#/components/schemas/WalletNotificationRequestCardDetails'
          discriminator:
            propertyName: type
            mapping:
              PAYPAL: '#/components/schemas/WalletNotificationRequestPaypalDetails'
              CARD: '#/components/schemas/WalletNotificationRequestCardDetails'
      required:
        - timestampOperation
        - operationResult
    WalletNotificationRequestPaypalDetails:
      type: object
      description: APM wallet notification details for PayPal onboarding
      properties:
        type:
          type: string
          description: discriminator field, fixed value `PAYPAL`
        maskedEmail:
          type: string
      required:
        - type
        - maskedEmail
      example:
        type: PAYPAL
        maskedEmail: t***@t***.it
    WalletNotificationRequestCardDetails:
      type: object
      description: Card wallet notification details for onboarding
      properties:
        type:
          type: string
          description: discriminator field, fixed value `CARD`
        paymentInstrumentGatewayId:
          type: string
      required:
        - type
        - paymentInstrumentGatewayId
      example:
        type: CARD
        paymentInstrumentGatewayId: c2402dcc-ef9d-4c68-8067-e4b6268a2e62
    SessionWalletRetrieveResponse:
      type: object
      description: Data related to session wallet
      properties:
        orderId:
          type: string
        walletId:
          type: string
        isFinalOutcome:
          type: boolean
        outcome:
          type: number
          enum:
            - 0  # SUCCESS
            - 1  # GENERIC_ERROR
            - 2  # AUTH_ERROR
            - 3  # INVALID_DATA
            - 4  # TIMEOUT
            - 7  # INVALID_CARD
            - 8  # CANCELED_BY_USER
            - 14 # INVALID_SESSION
            - 15 # ALREADY_ONBOARDED
      required:
        - orderId
        - walletId
        - isFinalOutcome
    Field:
      type: object
      properties:
        type:
          type: string
          example: text
        class:
          type: string
          example: cardData
        id:
          type: string
          example: cardholderName
        src:
          type: string
          format: uri
          example: https://<fe>/field.html?id=CARDHOLDER_NAME&sid=052211e8-54c8-4e0a-8402-e10bcb8ff264
    ApplicationCreateRequest:
      type: object
      description: Application creation request
      properties:
        applicationId:
          type: string
          description: Application id
        status:
          $ref: "#/components/schemas/ApplicationStatus"
      required:
        - name
    ApplicationCreateResponse:
      type: object
      description: Application creation response
      properties:
        applicationId:
          $ref: '#/components/schemas/ApplicationId'
      required:
        - applicationId
    ApplicationPatchRequest:
      type: object
      description: Application updating request
      properties:
        status:
          $ref: "#/components/schemas/ApplicationStatus"
      required:
        - status
    ProblemJson:
      description: Body definition for error responses containing failure details
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in english and
            readable

            for engineers (usually not suited for non technical stakeholders and

            not localized); example: Application Unavailable
        status:
          $ref: '#/components/schemas/HttpStatusCode'
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the
            problem.

            It may or may not yield further information if dereferenced.
    HttpStatusCode:
      type: integer
      format: int32
      description: |-
        The HTTP status code generated by the origin server for this occurrence
        of the problem.
      minimum: 100
      maximum: 600
      exclusiveMaximum: true
      example: 502
    WalletAuthData:
      type: object
      description: Wallet information
      properties:
        walletId:
          $ref: '#/components/schemas/WalletId'
        contractId:
          description: Payment method identifier
          type: string
        brand:
          description: The card brand name
          type: string
        paymentMethodData:
          oneOf:
            - $ref: "#/components/schemas/WalletAuthCardData"
            - $ref: "#/components/schemas/WalletAuthAPMData"
          discriminator:
            propertyName: paymentMethodType
            mapping:
              cards: "#/components/schemas/WalletAuthCardData"
              apm: "#/components/schemas/WalletAuthAPMData"
      required:
        - contractId
        - brand
        - paymentMethodData
    WalletAuthCardData:
      x-discriminator-value: cards
      type: object
      properties:
        paymentMethodType:
          type: string
        bin:
          type: string
          description: Bin of user card
      required:
        - paymentMethodType
        - bin
    WalletAuthAPMData:
      x-discriminator-value: apm
      type: object
      properties:
        paymentMethodType:
          type: string
      required:
        - paymentMethodType
    WalletIdPm:
      type: integer
      format: int64
    WalletPmAssociationRequest:
      type: object
      properties:
        walletIdPm:
          $ref: '#/components/schemas/WalletIdPm'
        userId:
          type: string
          format: uuid
          description: User registered's anonymized fiscal code
      required:
        - walletIdPm
        - userId
    WalletPmAssociationResponse:
      type: object
      properties:
        walletId:
          $ref: '#/components/schemas/WalletId'
        walletIdPm:
          $ref: '#/components/schemas/WalletIdPm'
        contractId:
          description: Payment method identifier
          type: string
        status:
          $ref: '#/components/schemas/WalletStatus'
      required:
        - walletId
        - walletIdPm
        - contractId
        - status
    WalletPmCardDetailsResponse:
      type: object
      properties:
        walletId:
          $ref: '#/components/schemas/WalletId'
    WalletPmCardDetailsRequest:
      type: object
      properties:
        cardBin:
          type: string
          description: Card BIN (first 6/8 PAN digits)
          pattern: ^(\d{6})|(\d{8})$
          example: '123456'
        lastFourDigits:
          type: string
          description: "The last 4 digits of PAN"
          pattern: ^\d{4}$
        expiryDate:
          type: string
          description: Credit card expiry date. The date format is `MM/YY`
          pattern: ^\d{2}\/\d{2}$
          example: '12/25'
        paymentGatewayCardId:
          type: string
        paymentCircuit:
          description: Payment instrument brand
          type: string
        contractIdentifier:
          type: string
          description: "The contract Id generated by Wallet for NPG"
        newContractIdentifier:
          type: string
          description: "The updated contract Id from NPG"
      required:
        - cardBin
        - lastFourDigits
        - expiryDate
        - paymentGatewayCardId
        - paymentCircuit
        - contractIdentifier
        - newContractIdentifier
    WalletPmDeleteRequest:
      type: object
      properties:
        contractIdentifier:
          type: string
          description: "The contract Id generated by Wallet for NPG"
      required:
        - contractIdentifier
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
