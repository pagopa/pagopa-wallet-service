{
	"info": {
		"_postman_id": "c70a2a7c-3637-4661-8b78-a33905375714",
		"name": "Wallet CARDS onboarding",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23963988"
	},
	"item": [
		{
			"name": "Create new wallet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] New wallet created successfully with POST /wallets\", function () {",
							"    pm.response.to.have.status(201);",
							"    const redirectUrl = pm.response.json().redirectUrl;",
							"    pm.expect(redirectUrl).to.be.a(\"string\");",
							"    pm.expect(redirectUrl).to.be.include(\"creditcard#\");",
							"    const fragment = redirectUrl.split(\"#\")[1];",
							"    const fragmentSplits = fragment.split(\"&\");",
							"    const walletId = fragmentSplits[0].split(\"=\")[1];",
							"    const useDiagnosticTracing = fragmentSplits[1].split(\"=\")[1];",
							"    const paymentMethodId = fragmentSplits[2].split(\"=\")[1];",
							"    pm.expect(walletId).to.be.not.null;",
							"    pm.expect(useDiagnosticTracing).to.be.not.null;",
							"    pm.expect(useDiagnosticTracing).to.be.eq(pm.environment.get(\"USE_DIAGNOSTIC_TRACING\"));",
							"    pm.expect(paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"));",
							"    pm.environment.set(\"WALLET_ID\", walletId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet payment method id not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] New wallet creation request with error invalid payment method id\", function () {",
							"    pm.response.to.have.status(502);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{INVALID_PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet invalid service name PAGOPA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] New wallet creation request with error invalid service name PAGOPA\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet x-user-id header not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] New wallet creation request with error x-user-id header not found\", function () {",
							"    pm.response.to.have.status(400);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Input request is not valid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet x-user-id header invalid format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] New wallet creation request with error x-user-id invalid format\", function () {",
							"    pm.response.to.have.status(400);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Input request is not valid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "invalidUserId",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Get wallet by id with GET /wallets/:idWallet\", function () {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.walletId).to.be.a(\"string\")",
							"    pm.expect(responseJson.userId).to.be.a(\"string\")",
							"    pm.expect(responseJson.paymentMethodId).to.be.a(\"string\")",
							"    pm.expect(responseJson.status).to.be.a(\"string\")",
							"    pm.expect(responseJson.status).to.be.eq(\"CREATED\")",
							"    pm.expect(responseJson.walletId).to.be.eq(pm.environment.get(\"WALLET_ID\"))",
							"    pm.expect(responseJson.userId).to.be.eq(pm.environment.get(\"x-user-id\"))",
							"    pm.expect(responseJson.paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet by id not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Get wallet by id return 404 not found for GET /wallets/:idWallet\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{INVALID_WALLET_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{INVALID_WALLET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet by x-user-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Get wallet by x-user-id return wallet information GET /wallets/\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.wallets).to.be.not.null;",
							"    const createdWallet = response.wallets[0];",
							"    pm.expect(createdWallet.walletId).to.be.a(\"string\")",
							"    pm.expect(createdWallet.userId).to.be.a(\"string\")",
							"    pm.expect(createdWallet.paymentMethodId).to.be.a(\"string\")",
							"    pm.expect(createdWallet.status).to.be.a(\"string\")",
							"    pm.expect(createdWallet.status).to.be.eq(\"CREATED\")",
							"    pm.expect(createdWallet.walletId).to.be.eq(pm.environment.get(\"WALLET_ID\"))",
							"    pm.expect(createdWallet.userId).to.be.eq(pm.environment.get(\"x-user-id\"))",
							"    pm.expect(createdWallet.paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"))",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet invalid x-user-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Get wallet by x-user-id with error invalid format\", function () {",
							"    pm.response.to.have.status(400);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Input request is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{invalid-x-user-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post sessions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const sdk = require('postman-collection');",
							"",
							"pm.test(\"[Wallet for onboarding CARDS] New wallet session created successfully with POST /wallets/:idWallet/sessions\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    const response = pm.response.json();",
							"    const sessionData = response.sessionData;",
							"    pm.expect(sessionData.paymentMethodType).to.be.eq(\"cards\");",
							"    const cardFormFieldsDataWithoutSrc = sessionData.cardFormFields.map(form => {",
							"        const { src, ...rest } = form;",
							"        return rest;",
							"    });",
							"    const expectedCardFormFieldsDataWithoutSrc =",
							"     [",
							"            {",
							"                \"type\": \"TEXT\",",
							"                \"class\": \"CARD_FIELD\",",
							"                \"id\": \"CARD_NUMBER\"",
							"            },",
							"            {",
							"                \"type\": \"TEXT\",",
							"                \"class\": \"CARD_FIELD\",",
							"                \"id\": \"EXPIRATION_DATE\"",
							"            },",
							"            {",
							"                \"type\": \"TEXT\",",
							"                \"class\": \"CARD_FIELD\",",
							"                \"id\": \"SECURITY_CODE\"",
							"            },",
							"            {",
							"                \"type\": \"TEXT\",",
							"                \"class\": \"CARD_FIELD\",",
							"                \"id\": \"CARDHOLDER_NAME\"",
							"            }",
							"        ];",
							"    saveNpgData(response);",
							"    pm.expect(expectedCardFormFieldsDataWithoutSrc).eql(cardFormFieldsDataWithoutSrc);",
							"    pm.expect(response.orderId).to.be.a(\"string\");",
							" ",
							"});",
							"",
							"function saveNpgData(response){",
							"    console.log(\"Read NPG response data...\");",
							"    const orderId = response.orderId;",
							"    const fieldUrl = response.cardFormFields[0].src;",
							"    ",
							"    const parsedUrl = new sdk.Url(fieldUrl).toJSON();",
							"    const correlationId = parsedUrl.query.find((queryParam) =>queryParam.key==\"correlationid\").value;",
							"    const sessionId= parsedUrl.query.find((queryParam) =>queryParam.key==\"sessionid\").value.replaceAll(\"%2F\",\"/\").replaceAll(\"%2B\",\"+\").replaceAll(\"%3D\",\"=\");",
							"    const fieldId= parsedUrl.query.find((queryParam) =>queryParam.key==\"id\").value;",
							"    console.log(`Order id: [${orderId}]`);",
							"    console.log(`Field url: [${fieldUrl}]`);",
							"    console.log(`correlation id: [${correlationId}]`);",
							"    console.log(`session id: [${sessionId}]`);",
							"    console.log(`field id: [${fieldId}]`);",
							"    pm.environment.set(\"ORDER_ID\", response.orderId);",
							"    pm.environment.set(\"NPG_IFRAME_FIELD_URL\", fieldUrl);",
							"    pm.environment.set(\"NPG_CORRELATION_ID\", correlationId);",
							"    pm.environment.set(\"NPG_SESSION_ID\", sessionId);",
							"    pm.environment.set(\"NPG_IFRAME_FIELD_ID\", fieldId);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"paymentMethodType\": \"cards\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post sessions Wallet not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const sdk = require('postman-collection');",
							"",
							"pm.test(\"[Wallet for onboarding CARDS] New wallet session faild with 404 POST /wallets/:idWallet/sessions\", function () {",
							"    pm.response.to.have.status(404);",
							"",
							"    const response = pm.response.json();",
							"    pm.expect(response.title).to.equals(\"Wallet not found\")",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{INVALID_WALLET_ID}}/sessions",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{INVALID_WALLET_ID}}",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate wallet session wallet id not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Session wallet validate fails for invalid wallet id with POST /wallets/:idWallet/sessions/:idOrder/validations\", function () {",
							"    pm.response.to.have.status(404);",
							"    const response = pm.response.json();",
							"    pm.expect(response.title).to.equals(\"Wallet not found\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{INVALID_WALLET_ID}}/sessions/{{ORDER_ID}}/validations",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{INVALID_WALLET_ID}}",
						"sessions",
						"{{ORDER_ID}}",
						"validations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate wallet session orderId not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Session wallet validate fails for invalid order id with POST /wallets/:idWallet/sessions/:idOrder/validations\", function () {",
							"    pm.response.to.have.status(404);",
							"    const response = pm.response.json();",
							"    pm.expect(response.title).to.equals(\"Session not found\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{INVALID_ORDER_ID}}/validations",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{INVALID_ORDER_ID}}",
						"validations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate wallet session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Session wallet validated successfully with POST /wallets/:idWallet/sessions/:idOrder/validations\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.orderId).to.be.a(\"string\");",
							"    pm.expect(response.details.type).to.be.equals(\"CARDS\")",
							"    pm.expect(response.details.iframeUrl).to.be.a(\"string\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{ORDER_ID}}/validations",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{ORDER_ID}}",
						"validations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notify wallet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Session wallet notified successfully with POST /wallets/:idWallet/sessions/:idOrder/notifications\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{VALID_SECURITY_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"timestampOperation\" : \"2023-11-24T09:16:15.913748361Z\",\n    \"operationResult\": \"EXECUTED\",\n    \"operationId\": \"operationId\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{ORDER_ID}}/notifications",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{ORDER_ID}}",
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notify wallet invalid security token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Nofity wallet with invalid security token\", function () {",
							"    pm.response.to.have.status(401);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Cannot match Security token\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{INVALID_SECURITY_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"timestampOperation\" : \"2023-11-24T09:16:15.913748361Z\",\n    \"operationResult\": \"EXECUTED\",\n    \"operationId\": \"operationId\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{ORDER_ID}}/notifications",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{ORDER_ID}}",
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notify wallet missing security token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Nofity wallet with missing security token\", function () {",
							"    pm.response.to.have.status(401);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Unauthorised\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"timestampOperation\" : \"2023-11-24T09:16:15.913748361Z\",\n    \"operationResult\": \"EXECUTED\",\n    \"operationId\": \"operationId\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{ORDER_ID}}/notifications",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{ORDER_ID}}",
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notify wallet invalid wallet status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Nofity wallet with invalid current status\", function () {",
							"    pm.response.to.have.status(409);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Conflict with the current state walletId\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{VALID_SECURITY_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"timestampOperation\" : \"2023-11-24T09:16:15.913748361Z\",\n    \"operationResult\": \"EXECUTED\",\n    \"operationId\": \"operationId\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{ORDER_ID}}/notifications",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{ORDER_ID}}",
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notify wallet session invalid orderId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding CARDS] Nofity wallet with invalid orderId\", function () {",
							"    pm.response.to.have.status(404);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Cannot find session with orderId\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{VALID_SECURITY_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"timestampOperation\" : \"2023-11-24T09:16:15.913748361Z\",\n    \"operationResult\": \"EXECUTED\",\n    \"operationId\": \"operationId\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{INVALID_ORDER_ID}}/notifications",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"sessions",
						"{{INVALID_ORDER_ID}}",
						"notifications"
					]
				}
			},
			"response": []
		}
	]
}