{
  "info": {
    "_postman_id": "6ef5e3ab-c740-4fa3-83da-24e01edff500",
    "name": "Wallet",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23305473"
  },
  "item": [
    {
      "name": "Create new wallet",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] New wallet created successfully with POST /wallets\", function () {",
              "    pm.response.to.have.status(201);",
              "    const sdk = require('postman-collection');",
              "    const redirectUrl = pm.response.json().redirectUrl;",
              "    pm.expect(redirectUrl).to.be.a(\"string\")",
              "    var walletId = new sdk.Url(redirectUrl).query.get('walletId');",
              "    var useDiagnosticTracing = new sdk.Url(redirectUrl).query.get('useDiagnosticTracing');",
              "    pm.expect(walletId).to.be.not.null;",
              "    pm.expect(useDiagnosticTracing).to.be.not.null;",
              "    pm.expect(useDiagnosticTracing).to.be.eq(pm.environment.get(\"USE_DIAGNOSTIC_TRACING\"));",
              "    pm.environment.set(\"WALLET_ID\", walletId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{x-user-id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create new wallet payment method id not found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] New wallet creation request with error invalid payment method id\", function () {",
              "    pm.response.to.have.status(502);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{x-user-id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{INVALID_PAYMENT_METHOD_ID}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create new wallet invalid service name PAGOPA",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] New wallet creation request with error invalid service name PAGOPA\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{x-user-id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"services\": [\n    \"PAGOA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create new wallet x-user-id header not found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] New wallet creation request with error x-user-id header not found\", function () {",
              "    pm.response.to.have.status(400);",
              "    const detailErrorField = pm.response.json().detail;",
              "    pm.expect(detailErrorField).to.be.contain(\"'x-user-id' is not present\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "",
            "value": "",
            "type": "text",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create new wallet x-user-id header invalid format",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] New wallet creation request with error x-user-id invalid format\", function () {",
              "    pm.response.to.have.status(400);",
              "    const detailErrorField = pm.response.json().detail;",
              "    pm.expect(detailErrorField).to.be.contain(\"Type mismatch\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-user-id",
            "value": "invalidUserId",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"services\": [\n    \"PAGOA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get wallet by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] Get wallet by id with GET /wallets/:idWallet\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.walletId).to.be.a(\"string\")",
              "    pm.expect(responseJson.userId).to.be.a(\"string\")",
              "    pm.expect(responseJson.paymentMethodId).to.be.a(\"string\")",
              "    pm.expect(responseJson.status).to.be.a(\"string\")",
              "    pm.expect(responseJson.status).to.be.eq(\"CREATED\")",
              "    pm.expect(responseJson.walletId).to.be.eq(pm.environment.get(\"WALLET_ID\"))",
              "    pm.expect(responseJson.userId).to.be.eq(pm.environment.get(\"x-user-id\"))",
              "    pm.expect(responseJson.paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"))",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets",
            "{{WALLET_ID}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get wallet by id not found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] Get wallet by id return 404 not found for GET /wallets/:idWallet\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{HOSTNAME}}/wallets/{{INVALID_WALLET_ID}}",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets",
            "{{INVALID_WALLET_ID}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get wallet by x-user-id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] Get wallet by x-user-id return wallet information GET /wallets/\", function () {",
              "    pm.response.to.have.status(200);",
              "    const response = pm.response.json();",
              "    pm.expect(response.wallets).to.be.not.null;",
              "    const createdWallet = response.wallets[0];",
              "    pm.expect(createdWallet.walletId).to.be.a(\"string\")",
              "    pm.expect(createdWallet.userId).to.be.a(\"string\")",
              "    pm.expect(createdWallet.paymentMethodId).to.be.a(\"string\")",
              "    pm.expect(createdWallet.status).to.be.a(\"string\")",
              "    pm.expect(createdWallet.status).to.be.eq(\"CREATED\")",
              "    pm.expect(createdWallet.walletId).to.be.eq(pm.environment.get(\"WALLET_ID\"))",
              "    pm.expect(createdWallet.userId).to.be.eq(pm.environment.get(\"x-user-id\"))",
              "    pm.expect(createdWallet.paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"))",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{x-user-id}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get wallet invalid x-user-id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] Get wallet by x-user-id with error invalid format\", function () {",
              "    pm.response.to.have.status(400);",
              "    const detailErrorField = pm.response.json().detail;",
              "    pm.expect(detailErrorField).to.be.contain(\"Type mismatch\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{invalid-x-user-id}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{HOSTNAME}}/wallets",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post sessions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const sdk = require('postman-collection');",
              "",
              "pm.test(\"[Wallet for onboarding] New wallet created successfully with POST /wallets\", function () {",
              "    pm.response.to.have.status(200);",
              "",
              "    const response = pm.response.json();",
              "    ",
              "    const cardFormFieldsDataWithoutSrc = response.cardFormFields.map(form => {",
              "        const { src, ...rest } = form;",
              "        return rest;",
              "    });",
              "    const expectedCardFormFieldsDataWithoutSrc =",
              "     [",
              "            {",
              "                \"type\": \"TEXT\",",
              "                \"class\": \"CARD_FIELD\",",
              "                \"id\": \"CARD_NUMBER\"",
              "            },",
              "            {",
              "                \"type\": \"TEXT\",",
              "                \"class\": \"CARD_FIELD\",",
              "                \"id\": \"EXPIRATION_DATE\"",
              "            },",
              "            {",
              "                \"type\": \"TEXT\",",
              "                \"class\": \"CARD_FIELD\",",
              "                \"id\": \"SECURITY_CODE\"",
              "            },",
              "            {",
              "                \"type\": \"TEXT\",",
              "                \"class\": \"CARD_FIELD\",",
              "                \"id\": \"CARDHOLDER_NAME\"",
              "            }",
              "        ];",
              "    saveNpgData(response);",
              "    console.log(expectedCardFormFieldsDataWithoutSrc)",
              "    pm.expect(expectedCardFormFieldsDataWithoutSrc).eql(cardFormFieldsDataWithoutSrc);",
              "    pm.expect(response.orderId).to.be.a(\"string\");",
              " ",
              "});",
              "",
              "function saveNpgData(response){",
              "    console.log(\"Read NPG response data...\");",
              "    const orderId = response.orderId;",
              "    const fieldUrl = response.cardFormFields[0].src;",
              "    ",
              "    const parsedUrl = new sdk.Url(fieldUrl).toJSON();",
              "    const correlationId = parsedUrl.query.find((queryParam) =>queryParam.key==\"correlationid\").value;",
              "    const sessionId= parsedUrl.query.find((queryParam) =>queryParam.key==\"sessionid\").value.replaceAll(\"%2F\",\"/\").replaceAll(\"%2B\",\"+\").replaceAll(\"%3D\",\"=\");",
              "    const fieldId= parsedUrl.query.find((queryParam) =>queryParam.key==\"id\").value;",
              "    console.log(`Order id: [${orderId}]`);",
              "    console.log(`Field url: [${fieldUrl}]`);",
              "    console.log(`correlation id: [${correlationId}]`);",
              "    console.log(`session id: [${sessionId}]`);",
              "    console.log(`field id: [${fieldId}]`);",
              "    pm.environment.set(\"ORDER_ID\", response.orderId);",
              "    pm.environment.set(\"NPG_IFRAME_FIELD_URL\", fieldUrl);",
              "    pm.environment.set(\"NPG_CORRELATION_ID\", correlationId);",
              "    pm.environment.set(\"NPG_SESSION_ID\", sessionId);",
              "    pm.environment.set(\"NPG_IFRAME_FIELD_ID\", fieldId);",
              "}",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {}
      },
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{x-user-id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "text"
            }
          }
        },
        "url": {
          "raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}/sessions",
          "host": [
            "{{HOSTNAME}}"
          ],
          "path": [
            "wallets",
            "{{WALLET_ID}}",
            "sessions"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get NPG field (populate NPG cookies)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true,
        "disabledSystemHeaders": {
          "user-agent": true,
          "accept": true,
          "accept-encoding": true,
          "connection": true
        }
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json; charset=utf-8",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Dest",
            "value": "empty",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin",
            "type": "text"
          },
          {
            "key": "Idempotency-Key",
            "value": "{{$guid}}",
            "type": "text"
          },
          {
            "key": "Correlation-Id",
            "value": "{{NPG_CORRELATION_ID}}",
            "type": "text"
          },
          {
            "key": "session",
            "value": "{{NPG_SESSION_ID}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{NPG_HOSTNAME}}/fe/build/field_settings/{{NPG_IFRAME_FIELD_ID}}?lang=ITA",
          "host": [
            "{{NPG_HOSTNAME}}"
          ],
          "path": [
            "fe",
            "build",
            "field_settings",
            "{{NPG_IFRAME_FIELD_ID}}"
          ],
          "query": [
            {
              "key": "lang",
              "value": "ITA"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Fill NPG text data (populate iframe card data fields)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {
          "user-agent": true,
          "accept": true,
          "accept-encoding": true,
          "connection": true
        }
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json; charset=utf-8",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Dest",
            "value": "empty",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin",
            "type": "text"
          },
          {
            "key": "Idempotency-Key",
            "value": "{{$guid}}",
            "type": "text"
          },
          {
            "key": "Correlation-Id",
            "value": "{{NPG_CORRELATION_ID}}",
            "type": "text"
          },
          {
            "key": "session",
            "value": "{{NPG_SESSION_ID}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"fieldValues\": [\n        {\n            \"id\": \"EXPIRATION_DATE\",\n            \"value\": \"{{NPG_EXP_DATE}}\"\n        },\n        {\n            \"id\": \"CARD_NUMBER\",\n            \"value\": \"{{NPG_CARD_NUMBER}}\"\n        },\n        {\n            \"id\": \"SECURITY_CODE\",\n            \"value\": \"{{NPG_CARD_CVV}}\"\n        },\n        {\n            \"id\": \"CARDHOLDER_NAME\",\n            \"value\": \"{{NPG_CARD_HOLDER_NAME}}\"\n        }\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{NPG_HOSTNAME}}/fe/build/text/",
          "host": [
            "{{NPG_HOSTNAME}}"
          ],
          "path": [
            "fe",
            "build",
            "text",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Validate wallet session",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"[Wallet for onboarding] New wallet created successfully with POST /wallets\", function () {",
              "    pm.response.to.have.status(200);",
              "    const response = pm.response.json();",
              "    pm.expect(response.orderId).to.be.a(\"string\");",
              "    pm.expect(response.details.type).to.be.equals(\"CARDS\")",
              "    pm.expect(response.details.iframeUrl).to.be.a(\"string\")",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-user-id",
            "value": "{{x-user-id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{WEBVIEW_HOSTNAME}}/wallets/{{WALLET_ID}}/sessions/{{ORDER_ID}}/validations",
          "host": [
            "{{WEBVIEW_HOSTNAME}}"
          ],
          "path": [
            "wallets",
            "{{WALLET_ID}}",
            "sessions",
            "{{ORDER_ID}}",
            "validations"
          ]
        }
      },
      "response": []
    }
  ]
}
