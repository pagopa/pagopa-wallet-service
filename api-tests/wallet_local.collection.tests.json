{
	"info": {
		"_postman_id": "dcdfd99e-be07-4467-a402-360b6b4219fe",
		"name": "Wallet",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24209240"
	},
	"item": [
		{
			"name": "Create new wallet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] New wallet created successfully with POST /wallets\", function () {",
							"    pm.response.to.have.status(201);",
							"    const sdk = require('postman-collection');",
							"    const redirectUrl = pm.response.json().redirectUrl;",
							"    pm.expect(redirectUrl).to.be.a(\"string\")",
							"    var walletId = new sdk.Url(redirectUrl).query.get('walletId');",
							"    var useDiagnosticTracing = new sdk.Url(redirectUrl).query.get('useDiagnosticTracing');",
							"    pm.expect(walletId).to.be.not.null;",
							"    pm.expect(useDiagnosticTracing).to.be.not.null;",
							"    pm.expect(useDiagnosticTracing).to.be.eq(pm.environment.get(\"USE_DIAGNOSTIC_TRACING\"));",
							"    pm.environment.set(\"WALLET_ID\", walletId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet payment method id not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] New wallet creation request with error invalid payment method id\", function () {",
							"    pm.response.to.have.status(502);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{INVALID_PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet invalid service name PAGOPA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] New wallet creation request with error invalid service name PAGOPA\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet x-user-id header not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] New wallet creation request with error x-user-id header not found\", function () {",
							"    pm.response.to.have.status(400);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"'x-user-id' is not present\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new wallet x-user-id header invalid format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] New wallet creation request with error x-user-id invalid format\", function () {",
							"    pm.response.to.have.status(400);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Type mismatch\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "invalidUserId",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"services\": [\n    \"PAGOA\"\n  ],\n  \"useDiagnosticTracing\": {{USE_DIAGNOSTIC_TRACING}},\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] Get wallet by id with GET /wallets/:idWallet\", function () {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.walletId).to.be.a(\"string\")",
							"    pm.expect(responseJson.userId).to.be.a(\"string\")",
							"    pm.expect(responseJson.paymentMethodId).to.be.a(\"string\")",
							"    pm.expect(responseJson.status).to.be.a(\"string\")",
							"    pm.expect(responseJson.status).to.be.eq(\"CREATED\")",
							"    pm.expect(responseJson.walletId).to.be.eq(pm.environment.get(\"WALLET_ID\"))",
							"    pm.expect(responseJson.userId).to.be.eq(pm.environment.get(\"x-user-id\"))",
							"    pm.expect(responseJson.paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{WALLET_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet by id not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] Get wallet by id return 404 not found for GET /wallets/:idWallet\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/wallets/{{INVALID_WALLET_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets",
						"{{INVALID_WALLET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet by x-user-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] Get wallet by x-user-id return wallet information GET /wallets/\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.wallets).to.be.not.null;",
							"    const createdWallet = response.wallets[0];",
							"    pm.expect(createdWallet.walletId).to.be.a(\"string\")",
							"    pm.expect(createdWallet.userId).to.be.a(\"string\")",
							"    pm.expect(createdWallet.paymentMethodId).to.be.a(\"string\")",
							"    pm.expect(createdWallet.status).to.be.a(\"string\")",
							"    pm.expect(createdWallet.status).to.be.eq(\"CREATED\")",
							"    pm.expect(createdWallet.walletId).to.be.eq(pm.environment.get(\"WALLET_ID\"))",
							"    pm.expect(createdWallet.userId).to.be.eq(pm.environment.get(\"x-user-id\"))",
							"    pm.expect(createdWallet.paymentMethodId).to.be.eq(pm.environment.get(\"PAYMENT_METHOD_ID\"))",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallet invalid x-user-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding] Get wallet by x-user-id with error invalid format\", function () {",
							"    pm.response.to.have.status(400);",
							"    const detailErrorField = pm.response.json().detail;",
							"    pm.expect(detailErrorField).to.be.contain(\"Type mismatch\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{invalid-x-user-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/wallets",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"wallets"
					]
				}
			},
			"response": []
		}
	]
}