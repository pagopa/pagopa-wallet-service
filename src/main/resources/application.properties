# Info
application.name=${name}
build.version=${version}
# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoints.jmx.exposure.include=health,info
management.info.env.enabled=true
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
# Server
server.servlet.context-path=/
server.port=8080
# Logging
logging.level.root=\${ROOT_LOGGING_LEVEL:INFO}
logging.level.it.pagopa=\${APP_LOGGING_LEVEL:INFO}
logging.level.web=\${WEB_LOGGING_LEVEL:DEBUG}
# Mongo
spring.data.mongodb.uri=mongodb://\${MONGO_USERNAME}:\${MONGO_PASSWORD}@\${MONGO_HOST}:\${MONGO_PORT}/?ssl=\${MONGO_SSL_ENABLED}&retryWrites=false&minPoolSize=\${MONGO_MIN_POOL_SIZE}&maxPoolSize=\${MONGO_MAX_POOL_SIZE}&maxIdleTimeMS=\${MONGO_MAX_IDLE_TIMEOUT_MS}&connectTimeoutMS=\${MONGO_CONNECTION_TIMEOUT_MS}&socketTimeoutMS=\${MONGO_SOCKET_TIMEOUT_MS}&serverSelectionTimeoutMS=\${MONGO_SERVER_SELECTION_TIMEOUT_MS}&waitQueueTimeoutMS=\${MONGO_WAITING_QUEUE_MS}&heartbeatFrequencyMS=\${MONGO_HEARTBEAT_FREQUENCY_MS}\${MONGO_REPLICA_SET_OPTION:}
spring.data.mongodb.database=\${MONGO_DB_NAME}
# NPG Service
npgService.uri=\${NPG_SERVICE_URI}
npgService.readTimeout=\${NPG_SERVICE_READ_TIMEOUT}
npgService.connectionTimeout=\${NPG_SERVICE_CONNECTION_TIMEOUT}
npgService.tcp.keepAlive.enabled=\${NPG_SERVICE_TCP_KEEP_ALIVE_ENABLED}
npgService.tcp.keepAlive.idle=\${NPG_SERVICE_TCP_KEEP_ALIVE_IDLE}
npgService.tcp.keepAlive.intvl=\${NPG_SERVICE_TCP_KEEP_ALIVE_INTVL}
npgService.tcp.keepAlive.cnt=\${NPG_SERVICE_TCP_KEEP_ALIVE_CNT}
npgService.apiKey=\${NPG_SERVICE_API_KEY}
sessionUrl.basePath=\${SESSION_URL_BASEPATH}
sessionUrl.outcomeSuffix=\${SESSION_URL_OUTCOME_SUFFIX}
sessionUrl.cancelSuffix=\${SESSION_URL_CANCEL_SUFFIX}
sessionUrl.notificationUrl=\${SESSION_URL_NOTIFICATION_URL}
sessionUrl.trxWithContextualOnboardNotificationUrl=\${SESSION_URL_TRX_WITH_CONTEXTUAL_ONBOARD_NOTIFICATION_URL}
npg.notifications.jwt.validityTimeSeconds=\${NPG_NOTIFICATIONS_JWT_VALIDITY_TIME_SECONDS}
npg.notifications.jwt.secretKey=\${NPG_NOTIFICATIONS_JWT_SECRET_KEY}
# wallet onboarding urls
wallet.onboarding.cardReturnUrl=\${WALLET_ONBOARDING_CARD_RETURN_URL}
wallet.onboarding.apmReturnUrl=\${WALLET_ONBOARDING_APM_RETURN_URL}
# wallet payment card url
wallet.payment.cardReturnUrl=\${WALLET_PAYMENT_CARD_RETURN_URL}
# PayPal PSP API Key for NPG onboarding
wallet.onboarding.paypal.apiKeys=\${WALLET_ONBOARDING_PAYPAL_PSP_API_KEY}
wallet.onboarding.paypal.pspList=\${WALLET_ONBOARDING_PAYPAL_PSP_LIST}
# eCommerce payment methods Service
ecommerce-payment-methods.uri=\${ECOMMERCE_PAYMENT_METHODS_URI}
ecommerce-payment-methods.uriV2=\${ECOMMERCE_PAYMENT_METHODS_URI_V2}
ecommerce-payment-methods.readTimeout=\${ECOMMERCE_PAYMENT_METHODS_TIMEOUT}
ecommerce-payment-methods.connectionTimeout=\${ECOMMERCE_PAYMENT_METHODS_CONNECTION_TIMEOUT}
ecommerce-payment-methods.apiKey=\${ECOMMERCE_PAYMENT_METHODS_API_KEY}
# Redis
spring.data.redis.host=\${REDIS_HOST}
spring.data.redis.password=\${REDIS_PASSWORD}
spring.data.redis.port=\${REDIS_PORT}
spring.data.redis.ssl=\${REDIS_SSL_ENABLED}
wallet.session.ttlSeconds=\${WALLET_SESSION_TTL_SECONDS}
payment-methods.cache.ttlSeconds=\${PAYMENT_METHOD_CACHE_TTL_SECONDS}
spring.data.mongodb.uuid-representation=standard
# Migration
wallet.migration.cardPaymentMethodId=\${WALLET_MIGRATION_CARD_PAYMENT_METHOD_ID}
wallet.migration.defaultApplicationId=\${WALLET_MIGRATION_DEFAULT_APPLICATION_ID}
#logo mapping
wallet.logo_mapping=\${WALLET_LOGO_MAPPING}
# Expiration queue
expiration-queue.storageConnectionString=\${EXPIRATION_QUEUE_CONNECTION_STRING}
expiration-queue.storageQueueName=\${EXPIRATION_QUEUE_NAME}
expiration-queue.ttlSeconds=\${EXPIRATION_QUEUE_TTL_SECONDS}
expiration-queue.timeoutWalletExpired=\${EXPIRATION_QUEUE_VISIBILITY_TIMEOUT_SEC}
# payment wallet log event dead letter queue
logged-action-dlq.storageConnectionString=\${PAYMENT_WALLET_LOG_EVENT_DEAD_LETTER_QUEUE_CONNECTION_STRING}
logged-action-dlq.storageQueueName=\${PAYMENT_WALLET_LOG_EVENT_DEAD_LETTER_STORAGE_QUEUE_NAME}
logged-action-dlq.ttlSeconds=\${PAYMENT_WALLET_LOG_EVENT_DEAD_LETTER_QUEUE_TTL_SECONDS}
logged-action-dlq.visibilityTimeoutSeconds=\${PAYMENT_WALLET_LOG_EVENT_DEAD_LETTER_QUEUE_VISIBILITY_TIMEOUT_SECONDS}
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=25s
# Retry policy of logging event
logging-event.retry-save.maxAttempts=\${LOGGING_EVENT_RETRY_MAX_ATTEMPTS}
logging-event.retry-save.intervalInSeconds=\${LOGGING_EVENT_RETRY_INTERVAL_SECONDS}
logging-event.retry-save.emitBusyLoopDurationInMillis=\${LOGGING_EVENT_RETRY_EMIT_BUSY_LOOP_MILLIS}
# jwt issuer Service
jwt-issuer.uri=\${JWT_ISSUER_URI}
jwt-issuer.readTimeout=\${JWT_ISSUER_TIMEOUT}
jwt-issuer.connectionTimeout=\${JWT_ISSUER_CONNECTION_TIMEOUT}
jwt-issuer.apiKey=\${JWT_ISSUER_API_KEY}