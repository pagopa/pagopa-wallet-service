# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'DEV deployment without release'
    type: boolean
    default: True
    values:
      - False
      - True

  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True

  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True

  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True

  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'
    - repository: pagopaWalletTests
      type: github
      name: pagopa/pagopa-wallet-tests
      ref: main
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: 'Build_for_DEV'
    displayName: 'Build for DEV deployment'
    condition: and(succeeded(), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
  - stage: 'Deploy_for_DEV'
    displayName: 'Deploy DEV'
    dependsOn: Build_for_DEV
    condition: and(succeeded(), eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    ENV: 'DEV'
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: "pay-wallet"
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/pay-wallet-values-dev.yaml"
                    GREEN_VERSION: $(Build.SourceVersion)
  - stage: "API_DEV_test"
    displayName: 'Running API test on dev app'
    dependsOn: Deploy_for_DEV
    jobs:
      - job: newman_api_test_cards
        displayName: 'API Tests: Wallet Cards'
        steps:
          - checkout: pagopaWalletTests
          - template: azure-templates/api-tests.yml
            parameters:
              TEST_DISPLAY_NAME: "Wallet cards tests"
              ENV_FILE: "api-tests/dev.cards.envs.json"
              TEST_FILE_PREFIX: "DEV-wallet-integration-test-cards"
              API_TEST_FILE: "api-tests/wallet_payment_api.cards.tests.json"
              WALLET_TOKEN_TEST: $(WALLET_TOKEN_TEST_DEV)
      - job: newman_api_test_paypal
        displayName: "API Test: Wallet PayPal"
        steps:
          - checkout: pagopaWalletTests
          - template: azure-templates/api-tests.yml
            parameters:
              TEST_DISPLAY_NAME: "Wallet PayPal tests"
              ENV_FILE: "api-tests/dev.paypal.envs.json"
              TEST_FILE_PREFIX: "DEV-wallet-integration-test-paypal"
              API_TEST_FILE: "api-tests/wallet_payment_api.paypal.tests.json"
              WALLET_TOKEN_TEST: $(WALLET_TOKEN_TEST_DEV)
  # --- END Deploy DEV --- #

  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: [ ]
    condition:
      and(
      succeeded(),
      eq(${{parameters.SKIP_BUILD}}, false),
      eq(${{parameters.UAT_PROD_DEPLOY}}, true),
      or(
      eq(variables['Build.SourceBranch'], 'refs/heads/main'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags')
      ))
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}

  - stage: "Get_Release_Version"
    displayName: "Get the app version to deploy"
    dependsOn: Build_release_candidate
    condition: in(dependencies.Build_release_candidate.result, 'Succeeded', 'Skipped')
    jobs:
      - job: "get_version"
        steps:
          - template: azure-templates/chart-current-version.yml

  - stage: "Deploy_UAT_Blue"
    displayName: 'UAT blue deployment'
    dependsOn: [ Tag_Docker_Release, Get_Release_Version ]
    condition: |
      and(
        succeeded(),
        eq(${{parameters.UAT_SKIP_BLUE_DEPLOYMENT}}, False),
        in(dependencies.Tag_Docker_Release.result, 'Succeeded', 'Skipped'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
      )
    variables:
      green_app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: pay-wallet
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)-blue
                    VALUE_FILE: "helm/pay-wallet-values-uat.yaml"
                    GREEN_VERSION: $(green_app_version)
                    BLUE_VERSION: $(Build.SourceVersion)

  - stage: "Bluegreen_WaitForApproval"
    displayName: 'UAT green approval deployment'
    ${{ if eq(parameters['PROD_SKIP_BLUE_DEPLOYMENT'], True) }}:
      dependsOn: [ Get_Release_Version, Tag_Docker_Release ]
      condition: |
        and(
          in(dependencies.Tag_Docker_Release.result, 'Succeeded', 'Skipped'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/main'),
            startsWith(variables['Build.SourceBranch'], 'refs/tags')
          )
        )
    ${{ if eq(parameters['PROD_SKIP_BLUE_DEPLOYMENT'], False) }}:
      dependsOn: [ Deploy_UAT_Blue ]
      condition: |
        and(
          eq(dependencies.Deploy_UAT_Blue.result, 'Succeeded'),
          in(dependencies.Tag_Docker_Release.result, 'Succeeded', 'Skipped'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/main'),
            startsWith(variables['Build.SourceBranch'], 'refs/tags')
          )
        )
    variables:
      commitUrl: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.commitUrl'] ]
    jobs:
      - job: Bluegreen_WaitForApproval
        displayName: Manual blue deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject UAT blue green promotions for $(commitUrl)"
              onTimeout: 'reject'

  - stage: "tag_docker_release"
    displayName: 'Tag Docker image to be release'
    dependsOn: Get_Release_Version
    condition:
      and(
      succeeded(),
      eq(${{parameters.SKIP_BUILD}}, false)
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [ tag_docker_release,Get_Release_Version, Bluegreen_WaitForApproval ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.tag_docker_release.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded'),
        eq(dependencies.Bluegreen_WaitForApproval.result, 'Succeeded'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - ${{ if eq(parameters['UAT_SKIP_BLUE_DEPLOYMENT'], False) }}:
                    # uninstall helm release used for blue instance
                    - task: HelmDeploy@0
                      displayName: Un-install UAT blue version
                      continueOnError: false
                      inputs:
                        kubernetesServiceEndpoint: $(UAT_KUBERNETES_SERVICE_CONN)
                        namespace: pay-wallet
                        command: uninstall
                        arguments: $(K8S_IMAGE_REPOSITORY_NAME)-blue
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: pay-wallet
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/pay-wallet-values-uat.yaml"
                    GREEN_VERSION: $(app_version)
  # --- END Deploy UAT --- #

  # --- START Deploy PROD --- #
  - stage: "Prod_WaitForApproval"
    displayName: 'PROD approval deployment'
    dependsOn: [ Deploy_UAT_Green,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Deploy_UAT_Green.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      release_url: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Prod_Approval
        displayName: Manual prod deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD promotions for release $(release_url)"
              onTimeout: 'reject'

  - stage: "Build_PROD_Blue"
    displayName: 'PROD blue Build'
    dependsOn: [ Prod_WaitForApproval,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(${{parameters.PROD_SKIP_BLUE_DEPLOYMENT}}, False),
        eq(dependencies.Prod_WaitForApproval.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "PROD_image"
        displayName: 'Build PROD image'
        steps:
          - task: Docker@2
            displayName: "docker login for UAT"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version) $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
          - task: Docker@2
            displayName: "docker login for PROD"
            inputs:
              containerRegistry: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "Push new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker push $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
  - stage: "Deploy_PROD_Blue"
    displayName: 'PROD blue deployment'
    dependsOn: [ Build_PROD_Blue,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(${{parameters.PROD_SKIP_BLUE_DEPLOYMENT}}, False),
        eq(dependencies.Build_PROD_Blue.result, 'Succeeded'),
        in(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Blue_PROD_deployment"
        displayName: "Blue PROD deployment"
        pool:
          name: pagopa-prod-linux
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'PROD'
                    KUBERNETES_SERVICE_CONN: $(PROD_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: pay-wallet
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)-blue
                    VALUE_FILE: "helm/pay-wallet-values-prod.yaml"
                    GREEN_VERSION: $(app_version)
                    BLUE_VERSION: $(Build.SourceVersion)

  - stage: "ApproveUninstallCanaryDeployment"
    displayName: "Approve uninstall of Canary instance"
    dependsOn: [ Deploy_PROD_Blue ]
    condition: eq(dependencies.Deploy_PROD_Blue.result, 'Succeeded')
    jobs:
      - job: UninstallCanaryDeployment_WaitForApproval
        displayName: Uninstall canary deployment approval
        pool: server
        timeoutInMinutes: 180 # 3 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180 # 3 hours
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD canary uninstall"
              onTimeout: "reject"

  - stage: "UninstallCanaryDeployment"
    displayName: "Uninstall Canary Instance"
    dependsOn: [ ApproveUninstallCanaryDeployment ]
    condition: eq(dependencies.ApproveUninstallCanaryDeployment.result, 'Succeeded')
    jobs:
      - job: Uninstall_CanaryInstance
        displayName: Uninstall canary instance
        pool:
          name: pagopa-prod-linux
        steps:
          # uninstall helm release used for blue instance
          - task: HelmDeploy@0
            displayName: Un-install PROD blue version
            continueOnError: false
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              namespace: pay-wallet
              command: uninstall
              arguments: $(K8S_IMAGE_REPOSITORY_NAME)-blue

  - stage: "ApproveCanaryTrafficWeight10Percent"
    displayName: "Approve Canary Traffic weight to 10%"
    dependsOn: [ Deploy_PROD_Blue ]
    condition: eq(dependencies.Deploy_PROD_Blue.result, 'Succeeded')
    jobs:
      - job: TrafficCanaryTo10Percent_WaitForApproval
        displayName: Canary traffic to 10 percent approval
        pool: server
        timeoutInMinutes: 180 # 3 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180 # 3 hours
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD canary traffic to 10 percent"
              onTimeout: "reject"

  - stage: "CanaryTrafficWeight10Percent"
    displayName: "Canary Traffic weight to 10%"
    dependsOn: [ ApproveCanaryTrafficWeight10Percent ]
    condition: eq(dependencies.ApproveCanaryTrafficWeight10Percent.result, 'Succeeded')
    jobs:
      - job: Set_TrafficCanaryTo10Percent
        displayName: Set canary traffic to 10 percent
        pool:
          name: pagopa-prod-linux
        steps:
          - task: Kubernetes@1
            displayName: 'Kubernetes Login'
            # This is needed to run kubectl command from bash.
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              command: 'login'
          - script: |
              kubectl annotate -n pay-wallet ingress/pagopa-pay-wallet-blue-microservice nginx.ingress.kubernetes.io/canary-weight=10 --overwrite
            displayName: Execute kubectl annotate to set traffic weight to 10 percent

  - stage: "ApproveCanaryTrafficWeight50Percent"
    displayName: "Approve Canary Traffic weight to 50%"
    dependsOn: [ Deploy_PROD_Blue ]
    condition: eq(dependencies.Deploy_PROD_Blue.result, 'Succeeded')
    jobs:
      - job: TrafficCanaryTo50Percent_WaitForApproval
        displayName: Canary traffic to 50 percent approval
        pool: server
        timeoutInMinutes: 180 # 3 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180 # 3 hours
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD canary traffic to 50 percent"
              onTimeout: "reject"

  - stage: "CanaryTrafficWeight50Percent"
    displayName: "Canary Traffic weight to 50%"
    dependsOn: [ ApproveCanaryTrafficWeight50Percent ]
    condition: eq(dependencies.ApproveCanaryTrafficWeight50Percent.result, 'Succeeded')
    jobs:
      - job: Set_TrafficCanaryTo50Percent
        displayName: Set canary traffic to 50 percent
        pool:
          name: pagopa-prod-linux
        steps:
          - task: Kubernetes@1
            displayName: 'Kubernetes Login'
            # This is needed to run kubectl command from bash.
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              command: 'login'
          - script: |
              kubectl annotate -n pay-wallet ingress/pagopa-pay-wallet-blue-microservice nginx.ingress.kubernetes.io/canary-weight=50 --overwrite
            displayName: Execute kubectl annotate to set traffic weight to 50 percent

  - stage: "ApproveCanaryTrafficWeight90Percent"
    displayName: "Approve Canary Traffic weight to 90%"
    dependsOn: [ Deploy_PROD_Blue ]
    condition: eq(dependencies.Deploy_PROD_Blue.result, 'Succeeded')
    jobs:
      - job: TrafficCanaryTo90Percent_WaitForApproval
        displayName: Canary traffic to 90 percent approval
        pool: server
        timeoutInMinutes: 180 # 3 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180 # 3 hours
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD canary traffic to 90 percent"
              onTimeout: "reject"

  - stage: "CanaryTrafficWeight90Percent"
    displayName: "Canary Traffic weight to 90%"
    dependsOn: [ ApproveCanaryTrafficWeight50Percent ]
    condition: eq(dependencies.ApproveCanaryTrafficWeight90Percent.result, 'Succeeded')
    jobs:
      - job: Set_TrafficCanaryTo90Percent
        displayName: Set canary traffic to 90 percent
        pool:
          name: pagopa-prod-linux
        steps:
          - task: Kubernetes@1
            displayName: 'Kubernetes Login'
            # This is needed to run kubectl command from bash.
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              command: 'login'
          - script: |
              kubectl annotate -n pay-wallet ingress/pagopa-pay-wallet-blue-microservice nginx.ingress.kubernetes.io/canary-weight=90 --overwrite
            displayName: Execute kubectl annotate to set traffic weight to 90 percent

  - stage: "ApproveCanaryTrafficWeight0Percent"
    displayName: "Approve removal of Canary Traffic"
    dependsOn: [ Deploy_PROD_Blue ]
    condition: eq(dependencies.Deploy_PROD_Blue.result, 'Succeeded')
    jobs:
      - job: RemoveCanaryTraffic_WaitForApproval
        displayName: Canary traffic to 0 percent approval
        pool: server
        timeoutInMinutes: 180 # 3 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180 # 3 hours
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD canary traffic to 0 percent"
              onTimeout: "reject"

  - stage: "CanaryTrafficWeight0Percent"
    displayName: "Remove Canary Traffic"
    dependsOn: [ ApproveCanaryTrafficWeight0Percent ]
    condition: eq(dependencies.ApproveCanaryTrafficWeight0Percent.result, 'Succeeded')
    jobs:
      - job: Set_TrafficCanaryTo10Percent
        displayName: Remove canary traffic
        pool:
          name: pagopa-prod-linux
        steps:
          - task: Kubernetes@1
            displayName: 'Kubernetes Login'
            # This is needed to run kubectl command from bash.
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              command: 'login'
          - script: |
              kubectl annotate -n pay-wallet ingress/pagopa-pay-wallet-blue-microservice nginx.ingress.kubernetes.io/canary-weight=0 --overwrite
            displayName: Remove canary traffic

  - stage: "PROD_Green_WaitForApproval"
    displayName: 'PROD green approval deployment'
    ${{ if eq(parameters['PROD_SKIP_BLUE_DEPLOYMENT'], True) }}:
      dependsOn: Prod_WaitForApproval
      condition: |
        and(
          eq(${{parameters.UAT_PROD_DEPLOY}}, true),
          in(dependencies.Prod_WaitForApproval.result, 'Succeeded')
        )
    ${{ if eq(parameters['PROD_SKIP_BLUE_DEPLOYMENT'], False) }}:
      dependsOn: [UninstallCanaryDeployment, Prod_WaitForApproval]
      condition: |
        and(
          eq(${{parameters.UAT_PROD_DEPLOY}}, true),
          in(dependencies.Prod_WaitForApproval.result, 'Succeeded'),
          in(dependencies.UninstallCanaryDeployment.result, 'Succeeded')
        )
    variables:
      release_url: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Bluegreen_PROD_WaitForApproval
        displayName: Manual green deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD green promotions for release $(release_url)"
              onTimeout: 'reject'

  - stage: "Build_PROD_Green"
    displayName: 'PROD green Build'
    dependsOn: [ PROD_Green_WaitForApproval,Get_Release_Version ]
    variables:
      prod_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.PROD_Green_WaitForApproval.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    jobs:
      - job: "PROD_image"
        displayName: 'Build PROD image'
        steps:
          - task: Docker@2
            displayName: "docker login for UAT"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version)
          - task: Docker@2
            displayName: "docker login for PROD"
            inputs:
              containerRegistry: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version) $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version)
                docker push $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version)
  - stage: "Deploy_PROD_Green"
    displayName: 'PROD green deployment'
    dependsOn: [ Build_PROD_Green,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Build_PROD_Green.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      prod_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Green_PROD_deployment"
        displayName: "Green PROD deployment"
        pool:
          name: pagopa-prod-linux
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'PROD'
                    KUBERNETES_SERVICE_CONN: $(PROD_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: pay-wallet
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/pay-wallet-values-prod.yaml"
                    GREEN_VERSION: $(prod_version)
  # --- END Deploy PROD --- #

  # --- START ROLLBACK PROD --- #
  - stage: "Prod_RollbackForApproval"
    displayName: 'PROD ROLLBACK'
    dependsOn: [ Deploy_PROD_Green,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.Deploy_PROD_Green.result, 'Succeeded', 'SucceededWithIssues', 'Failed', 'Skipped', 'Canceled'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      release_url: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Prod_Rollback_Approval
        displayName: Manual prod rollback approval
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD promotions for release $(release_url)"
              onTimeout: 'skip'
  - stage: "Prod_RollbackToLatestRelease"
    displayName: 'PROD rollback to the latest Release'
    dependsOn: [ Prod_RollbackForApproval ]
    condition: succeeded()
    jobs:
      - job: Prod_Rollback
        pool:
          name: pagopa-prod-linux
        steps:
          - task: HelmDeploy@0
            displayName: Helm Rollback PROD
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              namespace: pay-wallet
              command: rollback
              chartName: $(K8S_IMAGE_REPOSITORY_NAME)
              releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
              install: true
              waitForExecution: true
              arguments: $(K8S_IMAGE_REPOSITORY_NAME)
# --- END ROLLBACK PROD --- #
