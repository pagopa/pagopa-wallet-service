buildscript {
  repositories {
    mavenCentral() // or gradlePluginPortal()
  }
  dependencies {
    classpath("com.dipien:semantic-version-gradle-plugin:2.0.0")
  }
}

plugins {
  id 'java'
  id 'application'
  id 'org.springframework.boot' version '3.0.5'
  id 'io.spring.dependency-management' version '1.1.0'
  id "org.openapi.generator" version "6.3.0"
  id 'com.diffplug.spotless' version '6.18.0'
  id 'jacoco'
  id "org.sonarqube" version "3.5.0.2730"
}

group = 'it.pagopa.wallet'
version = "0.0.1"
description = 'pagopa-wallet-service'

project.ext.snapshot = "false"

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.dipien.semantic-version'

dependencyManagement {
  imports {
    mavenBom "io.projectreactor:reactor-bom:Dysprosium-SR1"
  }
}

repositories {
  mavenLocal()
  maven {
    url = uri('https://repo.maven.apache.org/maven2/')
  }
  mavenCentral()
}

dependencies {
  implementation 'io.projectreactor:reactor-core:3.5.5'
  implementation 'io.projectreactor.netty:reactor-netty:1.1.6'
  implementation 'org.springframework.boot:spring-boot-starter-webflux:3.0.4'
  implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.4'
  implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive:3.0.4'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.0.4'
  implementation 'com.azure.spring:spring-cloud-azure-starter:5.0.0'
  implementation 'com.azure.spring:spring-cloud-azure-starter-data-cosmos:4.6.0'
  implementation 'org.springframework.boot:spring-boot-starter-actuator:3.0.4'
  implementation 'org.springframework.boot:spring-boot-starter-web-services:3.0.4'
  implementation 'com.azure:azure-storage-queue:12.15.3'
  implementation 'wsdl4j:wsdl4j:1.6.3'
  implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
  implementation 'io.swagger:swagger-annotations:1.6.8'
  implementation 'org.apache.httpcomponents:httpclient:4.5.14'
  implementation 'com.google.code.findbugs:jsr305:3.0.2'
  implementation 'org.projectlombok:lombok:1.18.26'
  implementation 'io.springfox:springfox-swagger2:3.0.0'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'
  implementation 'commons-lang:commons-lang:2.6'
  implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.0.2'
  implementation 'io.github.resilience4j:resilience4j-reactor:2.0.2'
  implementation 'org.springframework.boot:spring-boot-starter-aop:3.0.4'
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  implementation 'io.netty:netty-resolver-dns-native-macos:4.1.90.Final'
  implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.18.0'
  implementation 'com.diffplug.spotless:spotless-lib-extra:2.38.0'
  runtimeOnly 'org.springframework.boot:spring-boot-devtools:3.0.4'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
  testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.4'
  testImplementation 'org.mockito:mockito-inline:5.2.0'
  testImplementation 'io.projectreactor:reactor-test:3.5.4'
  testImplementation 'org.jacoco:jacoco-maven-plugin:0.8.8'
  testImplementation 'org.apache.maven.reporting:maven-reporting-impl:4.0.0-M6'
  testImplementation 'org.testcontainers:testcontainers:1.17.6'
  testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
}

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

sourceSets {
main {
	java {
	srcDirs = ['src/main/java', "$buildDir/generated"]
	}
	resources {
	srcDirs = ['src/resources']
	}
}
}

springBoot {
mainClass = 'it.pagopa.wallet.WalletApplication'
}

tasks.register('wallet', GenerateTask) {
	generatorName = "spring"
	inputSpec = "$rootDir/api-spec/wallet-api.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = "it.pagopa.wallet.api"
	modelPackage = "it.pagopa.wallet.model"
	generateApiTests = false
	generateApiDocumentation = false
	generateApiTests = false
	generateModelTests = false
	library = "spring-boot"
	configOptions = [
			swaggerAnnotations: "false",
			openApiNullable: "true",
			interfaceOnly : "true",
			hideGenerationTimestamp: "true",
			skipDefaultInterface: "true",
			useSwaggerUI: "false",
			reactive: "true",
			useSpringBoot3: "true",
			oas3: "true"
	]
	}

tasks.register('nexiNpg', GenerateTask) {
	generatorName = "spring"
	inputSpec = "$rootDir/npg-api/npg-api.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = "it.pagopa.generated.npg.api"
	modelPackage = "it.pagopa.generated.npg.model"
	generateApiTests = false
	generateApiDocumentation = false
	generateApiTests = false
	generateModelTests = false
	library = "spring-boot"
	configOptions = [
			swaggerAnnotations: "false",
			openApiNullable: "true",
			interfaceOnly : "true",
			hideGenerationTimestamp: "true",
			skipDefaultInterface: "true",
			useSwaggerUI: "false",
			reactive: "true",
			useSpringBoot3: "true",
			oas3: "true"
	]
}
tasks.compileJava{
	dependsOn('wallet', 'nexiNpg')
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
  options.encoding = 'UTF-8'
}

	spotless {
		format 'misc', {
			// define the files to apply `misc` to
			target '*.md', '.gitignore'
			// define the steps to apply to those files
			trimTrailingWhitespace()
			indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
			endWithNewline()
		}
		java {
			target fileTree('.') {
				include '**/*.java'
				exclude '**/build/**', '**/build-*/**'
			}
			eclipse().configFile('eclipse-style.xml')
			toggleOffOn()
			removeUnusedImports()
			trimTrailingWhitespace()
			endWithNewline()
		}
	}

jar {
  enabled = false
  manifest {
    attributes(
        'Main-Class': 'it.pagopa.wallet.WalletApplication'
    )
  }
}

jacoco {
  toolVersion = "0.8.8"
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
  reports {
    xml.required = true
  }
}
